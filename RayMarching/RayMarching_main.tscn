[gd_scene load_steps=6 format=2]

[ext_resource path="res://RayMarching/ColorRect.gd" type="Script" id=1]
[ext_resource path="res://RayMarching/CameraMovement.gd" type="Script" id=2]
[ext_resource path="res://RayMarching/FovSlider.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform int MAX_STEPS = 100;
uniform float MAX_DIST = 20;
uniform float MIN_HIT_DIST = 0.0001;
uniform float DERIVATIVE_STEP = 0.0001;

uniform float ambientCoeff = 0.1;
uniform float diffuseCoeff = 0.9;
uniform float specularCoeff = 1.0;
uniform float specularExponent = 64.0;
uniform vec3 lightPos = vec3(0.0, 5.0, 0.0);

uniform float fov = 45.0;
uniform vec3 cameraPos = vec3(-5.0, 0.0, 0.0);
uniform vec3 front = vec3(1.0, 0.0, 0.0);
uniform vec3 up = vec3(0.0, 1.0, 0.0);

float sdPlane( vec3 p, vec4 n )
{
    // n must be normalized
    return dot(p,n.xyz) + n.w;
}

float sdSphere( vec3 p, vec3 c, float s )
{
    return length(c-p)-s;
}

float sdf(vec3 p)
{
    float res = min(
        sdSphere(p, vec3( 1.0, 0.0, 0.0), 1.0),
        sdSphere(p, vec3(-1.0, 0.0, 0.0), 1.0));
    return res;
}

vec3 estimateNormal(vec3 p) {
    return normalize(vec3(
        sdf(vec3(p.x + DERIVATIVE_STEP, p.y, p.z)) - sdf(vec3(p.x - DERIVATIVE_STEP, p.y, p.z)),
        sdf(vec3(p.x, p.y + DERIVATIVE_STEP, p.z)) - sdf(vec3(p.x, p.y - DERIVATIVE_STEP, p.z)),
        sdf(vec3(p.x, p.y, p.z  + DERIVATIVE_STEP)) - sdf(vec3(p.x, p.y, p.z - DERIVATIVE_STEP))
    ));
}

vec3 blinnPhong(vec3 position, vec3 lightPosition, vec3 ambient, vec3 diffuse)
{
    vec3 normal = estimateNormal(position);
    vec3 toEye = normalize(cameraPos - position);
    vec3 toLight = normalize(lightPosition - position);
    // vec3 reflection = reflect(-toLight, normal); // uncomment for Phong model
    vec3 halfwayDir = normalize(toLight + toEye);
    
    vec3 ambientFactor = ambient * ambientCoeff;
    vec3 diffuseFactor = diffuse * max(0.0, dot(normal, toLight));
    // vec3 specularFactor = diffuse * pow(max(0.0, dot(toEye, reflection)), specularExponent)
    //                     * specularCoeff; // uncomment for Phong model
    vec3 specularFactor = diffuse * pow(max(0.0, dot(normal, halfwayDir)), specularExponent)
                        * specularCoeff;
    
    return ambientFactor + diffuseFactor + specularFactor;
}

vec3 raymarch(vec3 rayDir)
{
    vec3 ambientColor = vec3(1.0, 1.0, 1.0);
	vec3 hitColor = vec3(1.0, 1.0, 1.0);
	vec3 missColor = vec3(0.0, 0.0, 0.0);
	
	float depth = 0.0;
	float minDist = MAX_DIST;
	for (int i=0; depth<MAX_DIST && i<MAX_STEPS; ++i)
	{
		vec3 pos = cameraPos + rayDir * depth;
		float dist = sdf(pos);
		minDist = min(minDist, dist);
		if (dist < MIN_HIT_DIST) {
            vec3 normal = estimateNormal(pos);
            vec3 lightningColor = blinnPhong(pos, lightPos, normal, hitColor);
            
			return lightningColor;
		}
		depth += dist;
	}
    return missColor;
}

vec3 getRayDirection(vec2 resolution, vec2 uv)
{
	float aspect = resolution.x / resolution.y;
	float fov2 = radians(fov) / 2.0;
	
	// convert coordinates from [0, 1] to [-1, 1]
	// and invert y axis to flow from bottom to top
	vec2 screenCoord = (uv - 0.5) * 2.0;
	screenCoord.x *= aspect;
	screenCoord.y = -screenCoord.y;
	
	vec2 offsets = screenCoord * tan(fov2);
	
	vec3 rayFront = normalize(front);
	vec3 rayRight = normalize(cross(rayFront, normalize(up)));
	vec3 rayUp = cross(rayRight, rayFront);
	vec3 rayDir = rayFront + rayRight * offsets.x + rayUp * offsets.y;
	
	return normalize(rayDir);
}

void fragment()
{
	vec2 resolution = 1.0 / SCREEN_PIXEL_SIZE;
	
	vec3 rayDir = getRayDirection(resolution, UV);
	COLOR = vec4(raymarch(rayDir), 1.0);
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/MAX_STEPS = 100
shader_param/MAX_DIST = 20.0
shader_param/MIN_HIT_DIST = 0.0001
shader_param/DERIVATIVE_STEP = 0.0001
shader_param/ambientCoeff = 0.2
shader_param/diffuseCoeff = 0.9
shader_param/specularCoeff = 1.0
shader_param/specularExponent = 64.0
shader_param/lightPos = Vector3( 0, 5, 0 )
shader_param/fov = 45.0
shader_param/cameraPos = Vector3( -5, 0, 0 )
shader_param/front = Vector3( 1, 0, 0 )
shader_param/up = Vector3( 0, 1, 0 )

[node name="Node" type="Node"]

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
rect_rotation = -0.042723

[node name="ColorRect" type="ColorRect" parent="Control"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )

[node name="CameraMovement" type="Node" parent="Control/ColorRect"]
script = ExtResource( 2 )

[node name="UI" type="Control" parent="Control"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="FovSlider" type="VSlider" parent="Control/UI"]
margin_right = 32.0
margin_bottom = 128.0
min_value = 15.0
max_value = 135.0
step = 0.01
value = 45.0
tick_count = 10
ticks_on_borders = true
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}
colorRect = NodePath("../../ColorRect")
